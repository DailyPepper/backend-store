openapi: 3.0.3
info:
  title: Backend Store API
  description: API for managing orders in the backend store
  version: 1.0.0

servers:
  - url: http://localhost:8080        
    description: Local dev
  - url: https://store/api            
    description: Prod

paths:
  /api/order:
    get:
      operationId: listOrders
      summary: Get all orders with pagination
      description: Retrieve a paginated list of all orders
      tags: [Orders]
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/LimitParam'
      responses:
        '200':
          description: Successful response with paginated orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrdersListResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      operationId: createOrder
      summary: Create a new order
      description: Create a new order with transaction support
      tags: [Orders]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request - invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/order/{id}:
    get:
      operationId: getOrderById
      summary: Get order by ID
      description: Retrieve a specific order by its ID
      tags: [Orders]
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Order found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid order ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      operationId: updateOrder
      summary: Update order
      description: Update an existing order with transaction support
      tags: [Orders]
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderRequest'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request - invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      operationId: deleteOrder
      summary: Delete order
      description: Delete an order with transaction support
      tags: [Orders]
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Order deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid order ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/product:
    get:
      operationId: listProducts
      summary: Get all products
      description: Retrieve a list of all products
      tags: [Products]
      responses:
        '200':
          description: Successful response with products list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      operationId: createProduct
      summary: Create a new product
      description: Create a new product
      tags: [Products]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad request - invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/product/{id}:
    get:
      operationId: getProductById
      summary: Get product by ID
      description: Retrieve a specific product by its ID
      tags: [Products]
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Product found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid product ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      operationId: updateProduct
      summary: Update product
      description: Update an existing product
      tags: [Products]
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Bad request - invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      operationId: deleteProduct
      summary: Delete product
      description: Delete a product
      tags: [Products]
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Product deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid product ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  parameters:
    PageParam:
      name: page
      in: query
      description: Page number for pagination
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    LimitParam:
      name: limit
      in: query
      description: Number of items per page
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10

  schemas:
    Order:
      type: object
      required:
        - id
        - customer_name
        - total_amount
        - status
        - created_at
        - updated_at
      properties:
        id:
          type: integer
          description: Unique identifier for the order
          example: 1
        customer_name:
          type: string
          description: Name of the customer
          example: "John Doe"
        total_amount:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: Total amount of the order (must be positive)
          example: 99.99
        status:
          type: string
          description: Status of the order
          enum: [pending, processing, completed, cancelled]
          default: pending
          example: pending
        created_at:
          type: string
          format: date-time
          description: Order creation timestamp
          example: "2023-10-05T14:30:00Z"
        updated_at:
          type: string
          format: date-time
          description: Order last update timestamp
          example: "2023-10-05T16:45:00Z"

    CreateOrderRequest:
      type: object
      required:
        - customer_name
        - total_amount
        # - user_id
      properties:
        user_id:
          type: integer
          description: User ID (optional - will be auto-generated if not provided)
          example: 1
        customer_name:
          type: string
          description: Name of the customer
          minLength: 1
          example: "John Doe"
        total_amount:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: Total amount of the order (must be positive)
          example: 99.99
      description: >
        Status is not accepted on creation; it defaults to "pending" on the server side.

    UpdateOrderRequest:
      type: object
      required:
        - customer_name
        - total_amount
        - user_id
        - status
      properties:
        customer_name:
          type: string
          description: Name of the customer
          minLength: 1
          example: "John Doe"
        total_amount:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: Total amount of the order (must be positive)
          example: 149.99
        status:
          type: string
          description: Status of the order
          enum: [pending, processing, completed, cancelled]
          example: completed

    PaginationMeta:
      type: object
      description: Pagination metadata
      required: [page, limit, total, total_pages, has_next, has_prev]
      properties:
        page:
          type: integer
          description: Current page number (1-based)
          example: 1
        limit:
          type: integer
          description: Number of items per page
          example: 10
        total:
          type: integer
          description: Total number of items across all pages
          example: 50
        total_pages:
          type: integer
          description: Total number of pages
          example: 5
        has_next:
          type: boolean
          description: Whether there is a next page
          example: true
        has_prev:
          type: boolean
          description: Whether there is a previous page
          example: false
        next_page:
          type: integer
          nullable: true
          description: Next page number if available
          example: 2
        prev_page:
          type: integer
          nullable: true
          description: Previous page number if available
          example: null

    OrdersListResponse:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        pagination:
          $ref: '#/components/schemas/PaginationMeta'

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Customer name is required"

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          description: Success message
          example: "Order deleted successfully"

    Product:
      type: object
      required:
        - id
        - name
        - description
        - price
        - created_at
      properties:
        id:
          type: integer
          description: Unique identifier for the product
          example: 1
        name:
          type: string
          description: Name of the product
          example: "Laptop"
        description:
          type: string
          description: Description of the product
          example: "High-performance laptop for work and gaming"
        price:
          type: number
          format: float
          minimum: 0
          description: Price of the product
          example: 999.99
        created_at:
          type: string
          format: date-time
          description: Product creation timestamp
          example: "2023-10-05T14:30:00Z"

    CreateProductRequest:
      type: object
      required:
        - name
        - description
        - price
      properties:
        name:
          type: string
          description: Name of the product
          minLength: 1
          example: "Laptop"
        description:
          type: string
          description: Description of the product
          minLength: 1
          example: "High-performance laptop for work and gaming"
        price:
          type: number
          format: float
          minimum: 0
          description: Price of the product
          example: 999.99

    UpdateProductRequest:
      type: object
      required:
        - name
        - description
        - price
      properties:
        name:
          type: string
          description: Name of the product
          minLength: 1
          example: "Gaming Laptop"
        description:
          type: string
          description: Description of the product
          minLength: 1
          example: "High-performance gaming laptop with RTX graphics"
        price:
          type: number
          format: float
          minimum: 0
          description: Price of the product
          example: 1299.99

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []