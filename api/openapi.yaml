openapi: 3.0.3
info:
  title: Backend Store API
  description: API for managing orders in the backend store
  version: 1.0.0

servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /orders:
    get:
      summary: Get all orders with pagination
      description: Retrieve a paginated list of all orders
      tags:
        - Orders
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: Successful response with paginated orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrdersListResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Create a new order
      description: Create a new order with transaction support
      tags:
        - Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request - invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{id}:
    get:
      summary: Get order by ID
      description: Retrieve a specific order by its ID
      tags:
        - Orders
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Order found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid order ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      summary: Update order
      description: Update an existing order with transaction support
      tags:
        - Orders
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderRequest'
      responses:
        '200':
          description: Order updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Bad request - invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      summary: Delete order
      description: Delete an order with transaction support
      tags:
        - Orders
      parameters:
        - name: id
          in: path
          required: true
          description: Order ID
          schema:
            type: integer
            minimum: 1
      responses:
        '200':
          description: Order deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid order ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    Order:
      type: object
      required:
        - id
        - customer_name
        - total_amount
        - status
        - created_at
      properties:
        id:
          type: integer
          description: Unique identifier for the order
          example: 1
        customer_name:
          type: string
          description: Name of the customer
          example: "John Doe"
        total_amount:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: Total amount of the order (must be positive)
          example: 99.99
        status:
          type: string
          description: Status of the order
          enum:
            - pending
            - processing
            - completed
            - cancelled
          default: pending
          example: pending
        created_at:
          type: string
          format: date-time
          description: Order creation timestamp
          example: "2023-10-05T14:30:00Z"

    CreateOrderRequest:
      type: object
      required:
        - customer_name
        - total_amount
      properties:
        customer_name:
          type: string
          description: Name of the customer
          minLength: 1
          example: "John Doe"
        total_amount:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: Total amount of the order (must be positive)
          example: 99.99
        status:
          type: string
          description: Status of the order
          enum:
            - pending
            - processing
            - completed
            - cancelled
          default: pending
          example: pending

    UpdateOrderRequest:
      type: object
      required:
        - customer_name
        - total_amount
        - status
      properties:
        customer_name:
          type: string
          description: Name of the customer
          minLength: 1
          example: "John Doe"
        total_amount:
          type: number
          format: float
          minimum: 0
          exclusiveMinimum: true
          description: Total amount of the order (must be positive)
          example: 99.99
        status:
          type: string
          description: Status of the order
          enum:
            - pending
            - processing
            - completed
            - cancelled
          example: completed

    OrdersListResponse:
      type: object
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        pagination:
          type: object
          properties:
            page:
              type: integer
              description: Current page number
              example: 1
            limit:
              type: integer
              description: Number of items per page
              example: 10
            total:
              type: integer
              description: Total number of orders
              example: 50

    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          description: Error message
          example: "Customer name is required"

    SuccessResponse:
      type: object
      properties:
        message:
          type: string
          description: Success message
          example: "Order deleted successfully"

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []