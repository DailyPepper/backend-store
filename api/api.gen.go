// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CreateOrderRequestStatus.
const (
	CreateOrderRequestStatusCancelled  CreateOrderRequestStatus = "cancelled"
	CreateOrderRequestStatusCompleted  CreateOrderRequestStatus = "completed"
	CreateOrderRequestStatusPending    CreateOrderRequestStatus = "pending"
	CreateOrderRequestStatusProcessing CreateOrderRequestStatus = "processing"
)

// Defines values for OrderStatus.
const (
	OrderStatusCancelled  OrderStatus = "cancelled"
	OrderStatusCompleted  OrderStatus = "completed"
	OrderStatusPending    OrderStatus = "pending"
	OrderStatusProcessing OrderStatus = "processing"
)

// Defines values for UpdateOrderRequestStatus.
const (
	Cancelled  UpdateOrderRequestStatus = "cancelled"
	Completed  UpdateOrderRequestStatus = "completed"
	Pending    UpdateOrderRequestStatus = "pending"
	Processing UpdateOrderRequestStatus = "processing"
)

// CreateOrderRequest defines model for CreateOrderRequest.
type CreateOrderRequest struct {
	// CustomerName Name of the customer
	CustomerName string `json:"customer_name"`

	// Status Status of the order
	Status *CreateOrderRequestStatus `json:"status,omitempty"`

	// TotalAmount Total amount of the order (must be positive)
	TotalAmount float32 `json:"total_amount"`
}

// CreateOrderRequestStatus Status of the order
type CreateOrderRequestStatus string

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error Error message
	Error *string `json:"error,omitempty"`
}

// Order defines model for Order.
type Order struct {
	// CreatedAt Order creation timestamp
	CreatedAt time.Time `json:"created_at"`

	// CustomerName Name of the customer
	CustomerName string `json:"customer_name"`

	// Id Unique identifier for the order
	Id int `json:"id"`

	// Status Status of the order
	Status OrderStatus `json:"status"`

	// TotalAmount Total amount of the order (must be positive)
	TotalAmount float32 `json:"total_amount"`
}

// OrderStatus Status of the order
type OrderStatus string

// OrdersListResponse defines model for OrdersListResponse.
type OrdersListResponse struct {
	Orders     *[]Order `json:"orders,omitempty"`
	Pagination *struct {
		// Limit Number of items per page
		Limit *int `json:"limit,omitempty"`

		// Page Current page number
		Page *int `json:"page,omitempty"`

		// Total Total number of orders
		Total *int `json:"total,omitempty"`
	} `json:"pagination,omitempty"`
}

// SuccessResponse defines model for SuccessResponse.
type SuccessResponse struct {
	// Message Success message
	Message *string `json:"message,omitempty"`
}

// UpdateOrderRequest defines model for UpdateOrderRequest.
type UpdateOrderRequest struct {
	// CustomerName Name of the customer
	CustomerName string `json:"customer_name"`

	// Status Status of the order
	Status UpdateOrderRequestStatus `json:"status"`

	// TotalAmount Total amount of the order (must be positive)
	TotalAmount float32 `json:"total_amount"`
}

// UpdateOrderRequestStatus Status of the order
type UpdateOrderRequestStatus string

// GetOrdersParams defines parameters for GetOrders.
type GetOrdersParams struct {
	// Page Page number for pagination
	Page *int `form:"page,omitempty" json:"page,omitempty"`

	// Limit Number of items per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostOrdersJSONRequestBody defines body for PostOrders for application/json ContentType.
type PostOrdersJSONRequestBody = CreateOrderRequest

// PutOrdersIdJSONRequestBody defines body for PutOrdersId for application/json ContentType.
type PutOrdersIdJSONRequestBody = UpdateOrderRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all orders with pagination
	// (GET /orders)
	GetOrders(c *gin.Context, params GetOrdersParams)
	// Create a new order
	// (POST /orders)
	PostOrders(c *gin.Context)
	// Delete order
	// (DELETE /orders/{id})
	DeleteOrdersId(c *gin.Context, id int)
	// Get order by ID
	// (GET /orders/{id})
	GetOrdersId(c *gin.Context, id int)
	// Update order
	// (PUT /orders/{id})
	PutOrdersId(c *gin.Context, id int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetOrders operation middleware
func (siw *ServerInterfaceWrapper) GetOrders(c *gin.Context) {

	var err error

	c.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrdersParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", c.Request.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", c.Request.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter limit: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOrders(c, params)
}

// PostOrders operation middleware
func (siw *ServerInterfaceWrapper) PostOrders(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostOrders(c)
}

// DeleteOrdersId operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrdersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteOrdersId(c, id)
}

// GetOrdersId operation middleware
func (siw *ServerInterfaceWrapper) GetOrdersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetOrdersId(c, id)
}

// PutOrdersId operation middleware
func (siw *ServerInterfaceWrapper) PutOrdersId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PutOrdersId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/orders", wrapper.GetOrders)
	router.POST(options.BaseURL+"/orders", wrapper.PostOrders)
	router.DELETE(options.BaseURL+"/orders/:id", wrapper.DeleteOrdersId)
	router.GET(options.BaseURL+"/orders/:id", wrapper.GetOrdersId)
	router.PUT(options.BaseURL+"/orders/:id", wrapper.PutOrdersId)
}
